
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
DIGITAL_INPUT PowerOn,PowerOff,UpArrow,DownArrow,LeftArrow,RightArrow;
DIGITAL_INPUT Select,Exit,Home,Menu,VolumeUp_pressed,VolumeDown_pressed,MuteToggle,Input_Select;
DIGITAL_INPUT Button_0,Button_1,Button_2,Button_3,Button_4,Button_5,Button_6,Button_7,Button_8,Button_9;
DIGITAL_INPUT Request_Power_State;

STRING_INPUT RX$[50];

DIGITAL_OUTPUT PowerOn_FB;
STRING_OUTPUT TX$;

INTEGER_PARAMETER Sender, Receiver;

//#BEGIN_PARAMETER_PROPERTIES Sender, Receiver
//propValidUnits = unitHex; // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
//propDefaultUnit = unitHex; // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
//propBounds = 0x00 , 0x0F;
// propDefaultValue = ;  // or, propDefaultValue = "";
// propList = // { "value" , "label" } , { "value" , "label" } , ... ;
// propShortDescription = "status_bar_hint_text";
// #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
// #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
//#END_PARAMETER_PROPERTIES

INTEGER send, rec;

integer_function getNumButton(integer num)
{
	integer base, returnValue;
	base = 32;
	returnValue = base + num;
	
	return (returnValue);
}

integer_function getButtonByName(string cmd)
{
	
	if (cmd = "select") return (0);
	if (cmd = "up") return (1);
	if (cmd = "down") return (2);
	if (cmd = "left") return (3);
	if (cmd = "right") return (4);
	if (cmd = "exit") return (0x0d);
	if (cmd = "home") return (9);
	if (cmd = "menu") return (0x0a);
	if (cmd = "input_select") return (0x34);
	if (cmd = "vol_up") return (0x41);
	if (cmd = "vol_down") return (0x42);
	if (cmd = "mute_toggle") return (0x43);
	if (cmd = "power_on") return (0x6d);
	if (cmd = "power_off") return (0x6c);
	if (cmd = "power_off") return (0x6c);
	if (cmd = "cr") return (0x45); // Command Released - simulates button release
}

function handleButtonName(string name){
	integer num, cr;
	num = getButtonByName(name);
	cr = getButtonByName("cr");
	makestring(TX$,"%c%c%c",send,0x44,num);
	makestring(TX$,"%c%c",send,cr);
}

function handleButtonNumber(integer number){
	integer num, cr;
	num = getNumButton(number);
	cr = getButtonByName("cr");
	makestring(TX$,"%c%c%c",send,0x44,num);
	makestring(TX$,"%c%c",send,cr);
}

PUSH PowerOn{
	handleButtonName("power_on");
}

PUSH PowerOff{
	handleButtonName("power_off");
}

PUSH UpArrow{
	handleButtonName("up");
}

PUSH DownArrow{
	handleButtonName("down");
}

PUSH LeftArrow{
	handleButtonName("left");
}

PUSH RightArrow{
	handleButtonName("right");
}

PUSH Select{
	handleButtonName("select");
}

PUSH Exit{
	handleButtonName("exit");
}

PUSH Home{
	handleButtonName("home");
}

PUSH Menu{
	handleButtonName("menu");
}

PUSH VolumeUp_pressed{
	handleButtonName("vol_up");
}

PUSH VolumeDown_pressed{
	handleButtonName("vol_down");
}

PUSH MuteToggle{
	handleButtonName("mute_toggle");
}

PUSH Input_Select{
	handleButtonName("input_select");
}

PUSH Button_0{
	handleButtonNumber(0);  
}
PUSH Button_1{
	handleButtonNumber(1);  
}
PUSH Button_2{
	handleButtonNumber(2);  
}
PUSH Button_3{
	handleButtonNumber(3);  
}
PUSH Button_4{
	handleButtonNumber(4);  
}
PUSH Button_5{
	handleButtonNumber(5);  
}
PUSH Button_6{
	handleButtonNumber(6);  
}
PUSH Button_7{
	handleButtonNumber(7);  
}
PUSH Button_8{
	handleButtonNumber(8);  
}
PUSH Button_9{
	handleButtonNumber(9);
}

PUSH Request_Power_State{
	makestring(TX$,"%c%c",send,0x8F);
}

CHANGE RX${
	integer byte1, byte2, byte3;
	string temp[50];
	temp = RX$;
	byte1 = BYTE(temp, 1);
	byte2 = BYTE(temp, 2);
	byte3 = BYTE(temp, 3);
	if (byte1 = rec){
  	if(byte2 = 0x90){
			if(byte3 = 0x00){
				PowerOn_FB= 1;
			}
			else if(byte3 = 0x01){
				PowerOn_FB = 0;
			}
		}
	}
}

Function Main(){
	send = (Sender << 4) + Receiver;
	rec = (Receiver << 4) + Sender;
	WaitForInitializationComplete();
}


